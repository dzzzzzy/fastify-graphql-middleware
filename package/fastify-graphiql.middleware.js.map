{"version":3,"sources":["../src/fastify-graphiql.middleware.ts"],"names":[],"mappings":";;AAAA,iFAAoF;AACpF,6BAA4B;AAG5B,yBAAgC,OAAqB;IACjD,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACtB,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,IAAI,WAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC;QACpD,qDAAqB,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aAC5C,IAAI,CAAC,cAAc,CAAC,EAAE;YACnB,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YAC3C,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC1B,GAAG,CAAC,GAAG,EAAE,CAAC;QACd,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE;YACX,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;AACN,CAAC;AAbD,0CAaC","file":"fastify-graphiql.middleware.js","sourcesContent":["import { GraphiQLData, resolveGraphiQLString } from \"apollo-server-module-graphiql\";\nimport { parse } from \"url\";\nimport { error } from \"util\";\n\nexport function fastifyGraphiQL(options: GraphiQLData): (req?: any, res?: any, next?: any) => any {\n    return (req, res, next) => {\n        const query = req.url && parse(req.url, true).query;\n        resolveGraphiQLString(query, options, [res, req])\n            .then(graphiqlString => {\n                res.setHeader(\"Content-Type\", \"text/html\");\n                res.write(graphiqlString);\n                res.end();\n            })\n            .catch(error => {\n                next(error.message);\n            });\n    };\n}"]}