{"version":3,"sources":["../src/graphql-fastify.middleware.ts"],"names":[],"mappings":";;AAAA,2DAAkF;AAIlF,wBAA+B,OAAqC;IAChE,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;KACtD;IAED,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACtB,iCAAY,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;aACzG,IAAI,CAAC,WAAW,CAAC,EAAE;YAChB,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YAClD,GAAG,CAAC,SAAS,CAAC,gBAAgB,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnF,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACvB,GAAG,CAAC,GAAG,EAAE,CAAC;QACd,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAqB,EAAE,EAAE;YAC7B,IAAI,gBAAgB,KAAK,KAAK,CAAC,IAAI,EAAE;gBACjC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;aACtB;YAED,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACxC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC;aACN;YAED,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YAClC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACzB,GAAG,CAAC,GAAG,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;AACN,CAAC;AA7BD,wCA6BC","file":"graphql-fastify.middleware.js","sourcesContent":["import { GraphQLOptions, HttpQueryError, runHttpQuery } from \"apollo-server-core\";\n\nexport type FastifyGraphQLOptionFunction = (req?: any, res?: any) => GraphQLOptions;\n\nexport function graphQLFastify(options: FastifyGraphQLOptionFunction): (req?: any, res?: any, next?: any) => any {\n    if (!options) {\n        throw new Error(\"Apollo Server requires options.\");\n    }\n\n    return (req, res, next) => {\n        runHttpQuery([req, res], { method: req.method, options, query: req.method === \"POST\" ? req.body : req.query })\n            .then(gqlResponse => {\n                res.setHeader(\"Content-Type\", \"application/json\");\n                res.setHeader(\"Content-Length\", Buffer.byteLength(gqlResponse, \"utf8\").toString());\n                res.write(gqlResponse);\n                res.end();\n            })\n            .catch((error: HttpQueryError) => {\n                if (\"HttpQueryError\" !== error.name) {\n                    return next(error);\n                }\n\n                if (error.headers) {\n                    Object.keys(error.headers).forEach(header => {\n                        res.setHeader(header, error.headers[header]);\n                    });\n                }\n\n                res.statusCode = error.statusCode;\n                res.write(error.message);\n                res.end();\n            });\n    };\n}"]}